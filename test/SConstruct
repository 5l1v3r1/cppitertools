import os
import platform

cc_flags = ["-I.",  "-std=c++17", "-Wall",]

if platform != "Windows":
    cc_flags += ["-Wextra", "-pedantic", "-g", '-I/usr/local/include']

env = Environment(
    ENV = os.environ,
    CXXFLAGS= cc_flags,
    CPPPATH='..')

progs = Split(
    '''
    accumulate
    chain
    chunked
    combinations
    combinations_with_replacement
    compress
    count
    cycle
    dropwhile
    enumerate
    filter
    filterfalse
    groupby
    imap
    permutations
    powerset
    product
    range
    repeat
    reversed
    slice
    sliding_window
    starmap
    sorted
    takewhile
    unique_everseen
    unique_justseen
    zip

    iteratoriterator
    iterator_wrapper
    iterbase
    mixed
    helpers
    '''
)

conf = Configure(env)

# if catch isn't available, exit
if platform != 'Windows' and not conf.CheckCXXHeader('catch.hpp'):
    print("WARNING: catch.hpp not found, run ./download_catch.sh first")
    print("note: you may receive this warning if the c++ compiler specified "
          "by CXX  at the top of the SConstruct file is invalid.")
    Exit(1)

if conf.CheckCXXHeader('boost/optional.hpp'):
    progs.append('zip_longest')

env = conf.Finish()

test_sources = ['test_{}.cpp'.format(p) for p in progs]

for test_src in test_sources:
    env.Program([test_src, 'test_main.cpp'])

env.Program('test_all', ['test_main.cpp'] + test_sources)
